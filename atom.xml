<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Siran Yang</title>
  <subtitle>杨斯然的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sirany.me/"/>
  <updated>2016-04-17T12:49:08.000Z</updated>
  <id>http://blog.sirany.me/</id>
  
  <author>
    <name>Siran Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux中的进程调度与进程切换</title>
    <link href="http://blog.sirany.me/2016/04/15/Linux%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E4%B8%8E%E8%BF%9B%E7%A8%8B%E5%88%87%E6%8D%A2/"/>
    <id>http://blog.sirany.me/2016/04/15/Linux中的进程调度与进程切换/</id>
    <published>2016-04-15T10:22:13.000Z</published>
    <updated>2016-04-17T12:49:08.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Linux中进程的调度时机&quot;&gt;&lt;a href=&quot;#Linux中进程的调度时机&quot; class=&quot;headerlink&quot; title=&quot;Linux中进程的调度时机&quot;&gt;&lt;/a&gt;Linux中进程的调度时机&lt;/h1&gt;&lt;p&gt;Linux中进程进行调度的时机有以下几个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;中断处理过程中直接调用&lt;code&gt;schedule()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;中断处理完后返回用户态之前根据&lt;code&gt;need_resched&lt;/code&gt;标记嗲用&lt;code&gt;schedule()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内核线程主动调用&lt;code&gt;schedule()&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如对于&lt;em&gt;2&lt;/em&gt;可以在&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#590&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;entry_32.S&lt;/a&gt;中找到对应的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	# perform work that needs to be done immediately before resumption&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;work_pending:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testb $_TIF_NEED_RESCHED, %cl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jz work_notifysig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;work_resched:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call schedule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	# ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;内核对进程调度的处理&quot;&gt;&lt;a href=&quot;#内核对进程调度的处理&quot; class=&quot;headerlink&quot; title=&quot;内核对进程调度的处理&quot;&gt;&lt;/a&gt;内核对进程调度的处理&lt;/h1&gt;&lt;p&gt;内核中的&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/kernel/sched/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sched&lt;/a&gt;目录包含了进程调度相关的逻辑，其他代码通过调用&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/kernel/sched/core.c#2865&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;schedule()&lt;/code&gt;&lt;/a&gt;使内核进行进程调度。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;asmlinkage __visible &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __&lt;span class=&quot;function&quot;&gt;sched &lt;span class=&quot;title&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *tsk = current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sched_submit_work(tsk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__schedule();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPORT_SYMBOL(schedule);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;__schedule()&lt;/code&gt;的代码中包括了一些比较关键的步骤：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next = pick_next_task(rq, prev);&lt;/code&gt;。从run queue中挑选出下一个进程准备调入。Linux内核的调度算法为CFS（Completely Fair Scheduling），进程在执行的过程中会累积virtual runtime，run queue是以virtual runtime从小到大组织的红黑树。调度器每次从run queue中选择virtual runtime最小的进程（最左侧的节点）作为调入进程。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	context_switch(rq, prev, next); &lt;span class=&quot;comment&quot;&gt;/* unlocks the rq */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	* The context switch have flipped the stack from under us&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * and restored the local variables which were saved when&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	* this task called schedule() in the past. prev == current&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	* is still correct, but it can be moved to another cpu/rq.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * context_switch - switch to the new MM and the new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * thread&#39;s register state.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;context_switch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; rq *rq, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *prev,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	       &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *next)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;/* Here we just switch the register state and the stack. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	switch_to(prev, next, prev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;switch_to(prev, next, last)&lt;/code&gt;进行内核栈位置、EFLAGS、EIP的保存与恢复。这里EIP的恢复是先将&lt;code&gt;next_ip&lt;/code&gt;压到栈上，使用&lt;code&gt;jmp __switch_to&lt;/code&gt;进行函数调转，当从&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/arc/kernel/ctx_sw.c#23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;__switch_to&lt;/code&gt;&lt;/a&gt;中返回时就会返回到新的进程的执行位置上（&lt;code&gt;1:&lt;/code&gt;或者&lt;code&gt;ret_from_fork:&lt;/code&gt;）。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Saving eflags is important. It switches not only IOPL between tasks,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * it also protects other tasks from NT leaking through sysenter etc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; switch_to(prev, next, last)					\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do &amp;#123;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*								\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * Context-switching clobbers all registers, so we clobber	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * them explicitly, via unused output variables.		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * (EAX and EBP is not listed because EBP is saved/restored	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * explicitly for wchan access and EAX is the return value of	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * __switch_to())						\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;								\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unsigned long ebx, ecx, edx, esi, edi;				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	asm volatile(&lt;span class=&quot;string&quot;&gt;&quot;pushfl\n\t&quot;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;/* save    flags */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;pushl %%ebp\n\t&quot;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;/* save    EBP   */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;movl %%esp,%[prev_sp]\n\t&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;/* save    ESP   */&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;movl %[next_sp],%%esp\n\t&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;/* restore ESP   */&lt;/span&gt; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;movl $1f,%[prev_ip]\n\t&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;/* save    EIP   */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;pushl %[next_ip]\n\t&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;/* restore EIP   */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     __switch_canary					\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;jmp __switch_to\n&quot;&lt;/span&gt;	&lt;span class=&quot;comment&quot;&gt;/* regparm call  */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;1:\t&quot;&lt;/span&gt;						\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;popl %%ebp\n\t&quot;&lt;/span&gt;		&lt;span class=&quot;comment&quot;&gt;/* restore EBP   */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;string&quot;&gt;&quot;popfl\n&quot;&lt;/span&gt;			&lt;span class=&quot;comment&quot;&gt;/* restore flags */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     &lt;span class=&quot;comment&quot;&gt;/* output parameters */&lt;/span&gt;				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     : [prev_sp] &lt;span class=&quot;string&quot;&gt;&quot;=m&quot;&lt;/span&gt; (prev-&amp;gt;thread.sp),		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       [prev_ip] &lt;span class=&quot;string&quot;&gt;&quot;=m&quot;&lt;/span&gt; (prev-&amp;gt;thread.ip),		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;string&quot;&gt;&quot;=a&quot;&lt;/span&gt; (last),					\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;comment&quot;&gt;/* clobbered output registers: */&lt;/span&gt;		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;string&quot;&gt;&quot;=b&quot;&lt;/span&gt; (ebx), &lt;span class=&quot;string&quot;&gt;&quot;=c&quot;&lt;/span&gt; (ecx), &lt;span class=&quot;string&quot;&gt;&quot;=d&quot;&lt;/span&gt; (edx),		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;string&quot;&gt;&quot;=S&quot;&lt;/span&gt; (esi), &lt;span class=&quot;string&quot;&gt;&quot;=D&quot;&lt;/span&gt; (edi)				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       							\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       __switch_canary_oparam				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;comment&quot;&gt;/* input parameters: */&lt;/span&gt;				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     : [next_sp]  &lt;span class=&quot;string&quot;&gt;&quot;m&quot;&lt;/span&gt; (next-&amp;gt;thread.sp),		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       [next_ip]  &lt;span class=&quot;string&quot;&gt;&quot;m&quot;&lt;/span&gt; (next-&amp;gt;thread.ip),		\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       							\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       &lt;span class=&quot;comment&quot;&gt;/* regparm parameters for __switch_to(): */&lt;/span&gt;	\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       [prev]     &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt; (prev),				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       [next]     &lt;span class=&quot;string&quot;&gt;&quot;d&quot;&lt;/span&gt; (next)				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		       __switch_canary_iparam				\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		     : &lt;span class=&quot;comment&quot;&gt;/* reloaded segment registers */&lt;/span&gt;			\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;&quot;memory&quot;&lt;/span&gt;);					\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; while (0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用gdb跟踪schedule-函数&quot;&gt;&lt;a href=&quot;#使用gdb跟踪schedule-函数&quot; class=&quot;headerlink&quot; title=&quot;使用gdb跟踪schedule()函数&quot;&gt;&lt;/a&gt;使用gdb跟踪schedule()函数&lt;/h1&gt;&lt;p&gt;我们使用gdb在上面提到过的几个函数入口设置断点：&lt;/p&gt;
&lt;img src=&quot;/2016/04/15/Linux中的进程调度与进程切换/breaks.png&quot; alt=&quot;设置断点&quot; title=&quot;设置断点&quot;&gt;
&lt;p&gt;继续执行，内核在调度时进入&lt;code&gt;schedule()&lt;/code&gt;：&lt;/p&gt;
&lt;img src=&quot;/2016/04/15/Linux中的进程调度与进程切换/schedule.png&quot; alt=&quot;schedule()&quot; title=&quot;schedule()&quot;&gt;
&lt;p&gt;&lt;code&gt;schedule()&lt;/code&gt;中调用了&lt;code&gt;pick_next_task(rq, prev)&lt;/code&gt;和&lt;code&gt;context_switch(rq, prev, next)&lt;/code&gt;：&lt;/p&gt;
&lt;img src=&quot;/2016/04/15/Linux中的进程调度与进程切换/pick_next_task_and_context_switch.png&quot; alt=&quot;pick_next_task 和 context_switch&quot; title=&quot;pick_next_task 和 context_switch&quot;&gt;
&lt;p&gt;执行&lt;code&gt;switch_to(prev, next, last)&lt;/code&gt;，调转到&lt;code&gt;__switch_to&lt;/code&gt;函数，返回到之前压到栈上的被调入进程的EIP——&lt;code&gt;ret_from_fork&lt;/code&gt;：&lt;/p&gt;
&lt;img src=&quot;/2016/04/15/Linux中的进程调度与进程切换/ret_from_fork.png&quot; alt=&quot;ret_from_fork&quot; title=&quot;ret_from_fork&quot;&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;如果说内核是一组中断服务例程的集合，那么这些服务例程所联结的就是系统中运行的一个个进程。多个用户进程同时运行在同一个系统中，他们无法主动的进程调度。当中断发生时，内核开始执行，响应该中断。而执行完成后系统可能返回到新的进程中。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFS Scheduler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;www.ece.ubc.ca/~sasha/papers/eurosys16-final29.pdf&quot;&gt;Lozi, Jean-Pierre, et al. “The Linux Scheduler: a Decade of Wasted Cores.” EuroSys 2016. 2016.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 i
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux中装载和启动可执行程序</title>
    <link href="http://blog.sirany.me/2016/04/10/Linux%E4%B8%AD%E8%A3%85%E8%BD%BD%E5%92%8C%E5%90%AF%E5%8A%A8%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>http://blog.sirany.me/2016/04/10/Linux中装载和启动可执行程序/</id>
    <published>2016-04-10T09:42:14.000Z</published>
    <updated>2016-04-11T04:31:18.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处  &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;ELF可执行格式&quot;&gt;&lt;a href=&quot;#ELF可执行格式&quot; class=&quot;headerlink&quot; title=&quot;ELF可执行格式&quot;&gt;&lt;/a&gt;ELF可执行格式&lt;/h1&gt;&lt;p&gt;Linux中可执行文件以&lt;a href=&quot;https://en.wikipedia.org/wiki/Executable_and_Linkable_Format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ELF格式&lt;/a&gt;组织。包括可执行程序（executable），目标文件（object）和共享库（shared library）。ELF文件中包括ELF header、Program header table（将文件组织为若干segment）、Section header table（将文件组织为若干section），以及若干部分的数据。内核负责读取ELF文件，并将数据加载到进程内存空间对应的位置。&lt;/p&gt;
&lt;h1 id=&quot;Linux中的装载与链接&quot;&gt;&lt;a href=&quot;#Linux中的装载与链接&quot; class=&quot;headerlink&quot; title=&quot;Linux中的装载与链接&quot;&gt;&lt;/a&gt;Linux中的装载与链接&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/yangsiran/731d976a3aa8842d667aa0b6dbdd8833&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/yangsiran/731d976a3aa8842d667aa0b6dbdd8833&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux中使用exec*系列的系统调用来加载程序，被加载的程序覆盖原有进程的空间，并从程序入口出开始执行。&lt;/p&gt;
&lt;p&gt;代码可以以库的形式组织，其中动态链接库可以被多个可执行程序共享。Linux中使用&lt;code&gt;ldd&lt;/code&gt;可以查看程序所链接的动态库。动态库也可以使用&lt;code&gt;dlopen&lt;/code&gt;来在运行时加载，使用&lt;code&gt;dlsym&lt;/code&gt;可以从动态库中找到相应的符号。&lt;/p&gt;
&lt;h1 id=&quot;内核对execve系统调用的处理&quot;&gt;&lt;a href=&quot;#内核对execve系统调用的处理&quot; class=&quot;headerlink&quot; title=&quot;内核对execve系统调用的处理&quot;&gt;&lt;/a&gt;内核对execve系统调用的处理&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/fs/exec.c#1604&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exec.c&lt;/a&gt;中我们可以看到定义系统调用&lt;code&gt;execve&lt;/code&gt;的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SYSCALL_DEFINE3(execve,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __user *, filename,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __user *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __user *, argv,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __user *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __user *, envp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_execve(getname(filename), argv, envp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_execve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; filename *filename,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __user *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __user *__argv,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; __user *&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; __user *__envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; user_arg_ptr argv = &amp;#123; .ptr.native = __argv &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; user_arg_ptr envp = &amp;#123; .ptr.native = __envp &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_execve_common(filename, argv, envp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_execve_common&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; filename *filename,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; user_arg_ptr argv,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; user_arg_ptr envp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; linux_binprm *bprm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; file *file = do_open_exec(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	copy_strings(bprm-&amp;gt;envc, envp, bprm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	copy_strings(bprm-&amp;gt;argc, argv, bprm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	exec_binprm(bprm);	&lt;span class=&quot;comment&quot;&gt;/* search_binary_handler(bprm); */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;search_binary_handler&lt;/code&gt;查找合适的handler来加载二进制可执行文件。&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/fs/exec.c#1352&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exec.c&lt;/a&gt;中可以看到一段遍历格式的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search_binary_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; linux_binprm *bprm)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; linux_binfmt *fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	list_for_each_entry(fmt, &amp;amp;formats, lh) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!try_module_get(fmt-&amp;gt;module))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt-&amp;gt;load_binary(bprm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里&lt;code&gt;&amp;amp;formats&lt;/code&gt;是包含所有可执行文件格式的链表，在&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/fs/binfmt_elf.c#82&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;binfmt_elf.c&lt;/a&gt;中我们可以看到关于ELF格式的节点：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; linux_binfmt elf_format = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.module		= THIS_MODULE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.load_binary	= load_elf_binary,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.load_shlib	= load_elf_library,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.core_dump	= elf_core_dump,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.min_coredump	= ELF_EXEC_PAGESIZE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __&lt;span class=&quot;function&quot;&gt;init &lt;span class=&quot;title&quot;&gt;init_elf_binfmt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	register_binfmt(&amp;amp;elf_format);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;load_elf_binary&lt;/code&gt;为处理ELF格式加载逻辑的函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;load_elf_binary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; linux_binprm *bprm)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * elf_interpreter；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (elf_interpreter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		elf_entry = load_elf_interp(&amp;amp;loc-&amp;gt;interp_elf_ex,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					    interpreter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					    &amp;amp;interp_map_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					    load_bias);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		elf_entry = loc-&amp;gt;elf_ex.e_entry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	start_thread(regs, elf_entry, bprm-&amp;gt;p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了各种格式的处理之外，如果可执行文件用到了外部的动态共享库，内核则会将返回位置设置为loader的入口，将控制权转交给loader，由loader进行共享库的查找、加载，调转到程序入口；否则内核将返回位置设置为程序入口&lt;code&gt;loc-&amp;gt;elf_ex.e_entry&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;start_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pt_regs *regs, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; new_ip, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; new_sp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	set_user_gs(regs, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;fs		= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;ds		= __USER_DS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;es		= __USER_DS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;ss		= __USER_DS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;cs		= __USER_CS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;ip		= new_ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;sp		= new_sp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	regs-&amp;gt;flags		= X86_EFLAGS_IF;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	set_thread_flag(TIF_NOTIFY_RESUME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;start_thread&lt;/code&gt;设置内核栈顶的寄存器，使得进程从中断中返回后可到达合适的位置。&lt;/p&gt;
&lt;h1 id=&quot;使用gdb跟踪execve系统调用&quot;&gt;&lt;a href=&quot;#使用gdb跟踪execve系统调用&quot; class=&quot;headerlink&quot; title=&quot;使用gdb跟踪execve系统调用&quot;&gt;&lt;/a&gt;使用gdb跟踪execve系统调用&lt;/h1&gt;&lt;p&gt;我们在&lt;a href=&quot;https://github.com/mengning/menu/blob/master/test_exec.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;menu&lt;/a&gt;中加入&lt;code&gt;fork&lt;/code&gt;一个子进程并加载&lt;code&gt;hello&lt;/code&gt;的命令&lt;em&gt;exec&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;我们使用gdb在上述提到的几个处理函数的入口设置断点：&lt;/p&gt;
&lt;img src=&quot;/2016/04/10/Linux中装载和启动可执行程序/set_breaks.png&quot; alt=&quot;设置断点&quot; title=&quot;设置断点&quot;&gt;
&lt;p&gt;可以看到内核在处理可执行文件加载时的确停在了这些位置上：&lt;/p&gt;
&lt;img src=&quot;/2016/04/10/Linux中装载和启动可执行程序/breaks.png&quot; alt=&quot;断点&quot; title=&quot;断点&quot;&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;当我们在Linux下执行一个新程序的时候，一般来说需要进行装载和链接两个动作。其中装载由内核中断处理函数完成，如需要进行动态库的链接，内核则会将控制权交给loader让其完成工作。程序员也可以在程序运行的过程中自行调用loader进行动态库的加载和符号的解析。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处  &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核创建一个新进程的过程</title>
    <link href="http://blog.sirany.me/2016/04/03/Linux%E5%86%85%E6%A0%B8%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.sirany.me/2016/04/03/Linux内核创建一个新进程的过程/</id>
    <published>2016-04-03T13:20:10.000Z</published>
    <updated>2016-04-11T04:36:27.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;存储进程信息的task-struct&quot;&gt;&lt;a href=&quot;#存储进程信息的task-struct&quot; class=&quot;headerlink&quot; title=&quot;存储进程信息的task_struct&quot;&gt;&lt;/a&gt;存储进程信息的task_struct&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/include/linux/sched.h#1235&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sched.h&lt;/a&gt;中的&lt;code&gt;task_struct&lt;/code&gt;结构体存储了各个进程相关的信息。这个结构体的定义也比较长，并且含有许多根据条件编译的成员。以下截取一些重要的内容，可以看到内核中所使用的数据结构是一些侵入式的十字链表：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; state;	&lt;span class=&quot;comment&quot;&gt;/* 进程的执行状态 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;/* 内核堆栈 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; list_head tasks;	&lt;span class=&quot;comment&quot;&gt;/* 所有进程 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; mm_struct *mm, *active_mm;	&lt;span class=&quot;comment&quot;&gt;/* 内存相关的信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; pid;	&lt;span class=&quot;comment&quot;&gt;/* 进程的pid */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; tgid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct __rcu *real_parent;	&lt;span class=&quot;comment&quot;&gt;/* 父进程 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct __rcu *parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; list_head children;	&lt;span class=&quot;comment&quot;&gt;/* 子进程 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; list_head sibling;	&lt;span class=&quot;comment&quot;&gt;/* 兄弟进程链表 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *group_leader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; signal_struct *signal;	&lt;span class=&quot;comment&quot;&gt;/* 信号相关信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sighand_struct *sighand;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; thread_struct thread;	&lt;span class=&quot;comment&quot;&gt;/* CPU相关的进程状态 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; fs_struct *fs;	&lt;span class=&quot;comment&quot;&gt;/* 文件系统相关信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; files_struct *files;	&lt;span class=&quot;comment&quot;&gt;/* 文件相关信息 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;thread_struct&lt;/code&gt;存储每个进程的CPU相关的一些关键信息，如&lt;em&gt;sp&lt;/em&gt;、&lt;em&gt;ip&lt;/em&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; thread_struct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;		sp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;		ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内核堆栈实际上是一个大小为8K的union：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; thread_union &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; thread_info thread_info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt;[THREAD_SIZE/&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; thread_info &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct	*task;		&lt;span class=&quot;comment&quot;&gt;/* main task structure */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; exec_domain	*exec_domain;	&lt;span class=&quot;comment&quot;&gt;/* execution domain */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__u32			flags;		&lt;span class=&quot;comment&quot;&gt;/* low level flags */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__u32			status;		&lt;span class=&quot;comment&quot;&gt;/* thread synchronous flags */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__u32			cpu;		&lt;span class=&quot;comment&quot;&gt;/* current CPU */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;			saved_preempt_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;mm_segment_t&lt;/span&gt;		addr_limit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; restart_block    restart_block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __user		*sysenter_return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;		sig_on_uaccess_error:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;		uaccess_err:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;/* uaccess failed */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;创建新进程时对task-struct的处理&quot;&gt;&lt;a href=&quot;#创建新进程时对task-struct的处理&quot; class=&quot;headerlink&quot; title=&quot;创建新进程时对task_struct的处理&quot;&gt;&lt;/a&gt;创建新进程时对task_struct的处理&lt;/h1&gt;&lt;p&gt;无论是&lt;code&gt;sys_fork&lt;/code&gt;、&lt;code&gt;sys_vfork&lt;/code&gt;，还是&lt;code&gt;sys_clone&lt;/code&gt;，实际上都是以不同的参数调用了&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/kernel/fork.c#1623&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fork.c&lt;/a&gt;中的&lt;code&gt;do_fork&lt;/code&gt;，例如&lt;code&gt;sys_clone&lt;/code&gt;的函数体为：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_fork(clone_flags, newsp, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, parent_tidptr, child_tidptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里&lt;code&gt;do_fork&lt;/code&gt;处理fork逻辑的主体，除了一些对参数的判断处理外，它执行了：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *p =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  copy_process(clone_flags, stack_start, stack_size, child_tidptr, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, trace);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考Linux Man Page中对&lt;code&gt;pid_t fork(void)&lt;/code&gt;的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fork() creates a new process by duplicating the calling process. The new process, referred to as the child, is an exact duplicate of the calling process, referred to as the parent, except for the following points:&lt;/p&gt;
&lt;p&gt;​    The child has its own unique process ID…&lt;br&gt;​    The child inherits copies of the parent’s set of open file descriptors…&lt;br&gt;​    …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以知道子进程是父进程的一个拷贝，但会对某些信息进行特化。这对应于&lt;code&gt;copy_process&lt;/code&gt;中包括的一些动作：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *p = dup_task_struct(current);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_files(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_fs(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_sighand(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_signal(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_mm(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_namespaces(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_io(clone_flags, p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;copy_thread(clone_flags, stack_start, stack_size, p);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;dup_task_struct&lt;/code&gt;进行了&lt;code&gt;task_struct&lt;/code&gt;结构体的的复制：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *tsk = alloc_task_struct_node(node);	&lt;span class=&quot;comment&quot;&gt;/* 分配新的task_struct结构体 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; thread_info *ti = alloc_thread_info_node(tsk, node);	&lt;span class=&quot;comment&quot;&gt;/* 分配新的内核栈 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arch_dup_task_struct(tsk, orig);	&lt;span class=&quot;comment&quot;&gt;/* *tsk = *orig，拷贝task_struct结构体 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tsk-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;stack&lt;/span&gt; = ti;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;copy_files&lt;/code&gt;到&lt;code&gt;copy_io&lt;/code&gt;根据参数对一些进程相关的信息进行处理，&lt;code&gt;copy_thread&lt;/code&gt;处理（拷贝）内核栈上CPU相关的信息，以便于子线程后续的恢复执行。其大概的流程包括：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pt_regs *childregs = task_pt_regs(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;thread.sp = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;) childregs;	&lt;span class=&quot;comment&quot;&gt;/* 复制栈顶位置 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;thread.sp0 = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;) (childregs+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*childregs = *current_pt_regs();	&lt;span class=&quot;comment&quot;&gt;/* 复制内核栈上保存的寄存器 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                	&lt;span class=&quot;comment&quot;&gt;/* 这些步骤可以保证子进程可以恢复出和父进程一样的现场 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;childregs-&amp;gt;ax = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;/* fork 在子进程中的返回值是0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	childregs-&amp;gt;sp = sp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 子进程被调度后从system_call中的ret_from_fork开始执行 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p-&amp;gt;thread.ip = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;) ret_from_fork;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;copy_thread&lt;/code&gt;是架构相关的，它在&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/process_32.c#132&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;process_32.c&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ret_from_fork&lt;/code&gt;则在&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S#290&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;entry_32.S&lt;/a&gt;中，它跳转到&lt;code&gt;system_call&lt;/code&gt;中的&lt;code&gt;system_exit&lt;/code&gt;继续执行从系统调用中返回的逻辑：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRY(ret_from_fork)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CFI_STARTPROC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl_cfi %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call schedule_tail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GET_THREAD_INFO(%ebp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	popl_cfi %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl_cfi $0x0202		# Reset kernel eflags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	popfl_cfi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jmp syscall_exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CFI_ENDPROC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;END(ret_from_fork)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;跟踪内核中fork的过程&quot;&gt;&lt;a href=&quot;#跟踪内核中fork的过程&quot; class=&quot;headerlink&quot; title=&quot;跟踪内核中fork的过程&quot;&gt;&lt;/a&gt;跟踪内核中fork的过程&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://github.com/mengning/menu/blob/master/test_fork.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;menu&lt;/a&gt;中加入Fork函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fork&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* fork another process */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pid&amp;lt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/* error occurred */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Fork Failed!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pid==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/*	 child process 	*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;This is Child Process!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/* 	parent process	 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;This is Parent Process!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;/* parent will wait for the child to complete*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		wait(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Child Complete!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在gdb中设置一些断点，并让内核停在&lt;code&gt;sys_clone&lt;/code&gt;/&lt;code&gt;do_fork&lt;/code&gt;处：&lt;/p&gt;
&lt;img src=&quot;/2016/04/03/Linux内核创建一个新进程的过程/do_fork.png&quot; alt=&quot;do_fork&quot; title=&quot;do_fork&quot;&gt;
&lt;p&gt;可以看到&lt;code&gt;do_fork&lt;/code&gt;进入了&lt;code&gt;copy_process&lt;/code&gt;。而&lt;code&gt;copy_process&lt;/code&gt;先是进入&lt;code&gt;dup_task_struct&lt;/code&gt;对&lt;code&gt;task_struct&lt;/code&gt;进行拷贝：&lt;/p&gt;
&lt;img src=&quot;/2016/04/03/Linux内核创建一个新进程的过程/dup_task_struct.png&quot; alt=&quot;dup_task_struct&quot; title=&quot;dup_task_struct&quot;&gt;
&lt;p&gt;之后是拷贝和特化内核栈信息的&lt;code&gt;copy_thread&lt;/code&gt;：&lt;/p&gt;
&lt;img src=&quot;/2016/04/03/Linux内核创建一个新进程的过程/copy_thread.png&quot; alt=&quot;copy_thread&quot; title=&quot;copy_thread&quot;&gt;
&lt;p&gt;我们在&lt;code&gt;ret_from_fork&lt;/code&gt;处设置断点，可以观察到子进程在这里开始执行：&lt;/p&gt;
&lt;img src=&quot;/2016/04/03/Linux内核创建一个新进程的过程/ret_from_fork.png&quot; alt=&quot;ret_from_fork&quot; title=&quot;ret_from_fork&quot;&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;内核创建子进程的过程可以简单的总结为对父进程进行拷贝，然后进行一系列关于子进程的特化，如内核栈信息，返回位置等。&lt;code&gt;task_struct&lt;/code&gt;结构体被用于存储内核中和每个进程相关的信息。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 i
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>system_call中断的处理过程</title>
    <link href="http://blog.sirany.me/2016/03/27/system-call%E4%B8%AD%E6%96%AD%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.sirany.me/2016/03/27/system-call中断的处理过程/</id>
    <published>2016-03-27T12:19:30.000Z</published>
    <updated>2016-04-04T03:04:15.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用gdb跟踪系统调用内核函数&quot;&gt;&lt;a href=&quot;#使用gdb跟踪系统调用内核函数&quot; class=&quot;headerlink&quot; title=&quot;使用gdb跟踪系统调用内核函数&quot;&gt;&lt;/a&gt;使用gdb跟踪系统调用内核函数&lt;/h1&gt;&lt;p&gt;我们在&lt;a href=&quot;https://github.com/mengning/menu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;menu&lt;/a&gt;的test.c中加入一些调用了系统调用的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; write(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hello, world\n&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloAsm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *greeting = &lt;span class=&quot;string&quot;&gt;&quot;hello, world\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;asm&lt;/span&gt; (   &lt;span class=&quot;string&quot;&gt;&quot;mov $1, %%ebx\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;mov $14, %%edx\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;mov $4, %%eax\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;int $0x80\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;mov %%eax, %0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            : &lt;span class=&quot;string&quot;&gt;&quot;=m&quot;&lt;/span&gt;(ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            : &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;(greeting));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PrintPid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%u\n&quot;&lt;/span&gt;, getpid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;time_t&lt;/span&gt; tt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tm *t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tt = time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = localtime(&amp;amp;tt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;time:%d:%d:%d:%d:%d:%d\n&quot;&lt;/span&gt;,t-&amp;gt;tm_year+&lt;span class=&quot;number&quot;&gt;1900&lt;/span&gt;, t-&amp;gt;tm_mon, t-&amp;gt;tm_mday, t-&amp;gt;tm_hour, t-&amp;gt;tm_min, t-&amp;gt;tm_sec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PrintMenuOS();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SetPrompt(&lt;span class=&quot;string&quot;&gt;&quot;MenuOS&amp;gt;&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MenuConfig(&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Get the current time.&quot;&lt;/span&gt;, Time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MenuConfig(&lt;span class=&quot;string&quot;&gt;&quot;print-pid&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Print Pid.&quot;&lt;/span&gt;, PrintPid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MenuConfig(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Say Hello.&quot;&lt;/span&gt;, Hello);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MenuConfig(&lt;span class=&quot;string&quot;&gt;&quot;hello-asm&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Say Hello (ASM).&quot;&lt;/span&gt;, HelloAsm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MenuConfig(&lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;XXX V1.0(Menu program v1.0 inside)&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MenuConfig(&lt;span class=&quot;string&quot;&gt;&quot;quit&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Quit from XXX&quot;&lt;/span&gt;,Quit);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ExecuteMenu();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译menu到rootfs中并启动内核，可以看到这些新加入的命令出现在命令列表中：&lt;/p&gt;
 &lt;img src=&quot;/2016/03/27/system-call中断的处理过程/syscall.png&quot; alt=&quot;syscall&quot; title=&quot;syscall&quot;&gt;
&lt;p&gt;我们可以在time调用对应的内核处理函数sys_time处设置断点：&lt;/p&gt;
&lt;img src=&quot;/2016/03/27/system-call中断的处理过程/break.png&quot; alt=&quot;break&quot; title=&quot;break&quot;&gt;
&lt;p&gt;可以看到sys_time在内核源码中并不是一个标准的C函数，而是由宏所定义的：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SYSCALL_DEFINE1(time, &lt;span class=&quot;keyword&quot;&gt;time_t&lt;/span&gt; __user *, tloc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;time_t&lt;/span&gt; i = get_seconds();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (tloc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (put_user(i,tloc))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -EFAULT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	force_successful_syscall_return();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在处理完系统调用后返回前，内核会进入调度逻辑：&lt;/p&gt;
&lt;img src=&quot;/2016/03/27/system-call中断的处理过程/schedule.png&quot; alt=&quot;schedule&quot; title=&quot;schedule&quot;&gt;
&lt;p&gt;在这之后的汇编代码无法被gdb跟踪。&lt;/p&gt;
&lt;p&gt;值得注意的是一些内核符号可以被gdb引用，但gdb无法使内核在这些符号处停下来，如sys_getpid、system_call：&lt;/p&gt;
&lt;img src=&quot;/2016/03/27/system-call中断的处理过程/unstoppable.png&quot; alt=&quot;unstoppable&quot; title=&quot;unstoppable&quot;&gt;
&lt;h1 id=&quot;entry-32-S中system-call对应代码&quot;&gt;&lt;a href=&quot;#entry-32-S中system-call对应代码&quot; class=&quot;headerlink&quot; title=&quot;entry_32.S中system_call对应代码&quot;&gt;&lt;/a&gt;entry_32.S中system_call对应代码&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/arch/x86/kernel/entry_32.S&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;arch/x86/kernel/entry_32.S&lt;/a&gt;中从&lt;code&gt;ENTRY(system_call)&lt;/code&gt;开始的一段代码负责处理system_call中断，当&lt;code&gt;int 0x80&lt;/code&gt;执行时系统便会跳转到此处。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ENTRY(system_call)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RING0_INT_FRAME			# can&#39;t unwind into user space anyway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ASM_CLAC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl_cfi %eax			# save orig_eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SAVE_ALL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GET_THREAD_INFO(%ebp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					# system call tracing in operation / emulation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testl $_TIF_WORK_SYSCALL_ENTRY,TI_flags(%ebp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jnz syscall_trace_entry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmpl $(NR_syscalls), %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jae syscall_badsys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syscall_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call *sys_call_table(,%eax,4)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syscall_after_call:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl %eax,PT_EAX(%esp)		# store the return value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syscall_exit:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	LOCKDEP_SYS_EXIT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DISABLE_INTERRUPTS(CLBR_ANY)	# make sure we don&#39;t miss an interrupt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					# setting need_resched or sigpending&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					# between sampling and the iret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TRACE_IRQS_OFF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl TI_flags(%ebp), %ecx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testl $_TIF_ALLWORK_MASK, %ecx	# current-&amp;gt;work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jne syscall_exit_work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;restore_all:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TRACE_IRQS_IRET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要完整理解这段代码需要充分的内核知识，但是从总体上仍然可以看出内核处理系统调用中断的过程。&lt;/p&gt;
&lt;img src=&quot;/2016/03/27/system-call中断的处理过程/system_call_workflow.png&quot; alt=&quot;system_call_workflow&quot; title=&quot;system_call_workflow&quot;&gt;
&lt;ol&gt;
&lt;li&gt;保存所有的寄存器：&lt;code&gt;SAVE_ALL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据&lt;code&gt;%eax&lt;/code&gt;中的系统调用号调用相应的处理函数：&lt;code&gt;call *sys_call_table(,%eax,4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;结束处理之前的工作：&lt;code&gt;jne syscall_exit_work&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;恢复寄存器：&lt;code&gt;RESTORE_REGS 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从中断中返回：&lt;code&gt;INTERRUPT_RETURN&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;system_exit_work&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;work_notifysig&lt;/code&gt;（处理信号）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;schedule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;跳转回上述的4（&lt;em&gt;restore_all&lt;/em&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;schedule&lt;/code&gt;在&lt;a href=&quot;http://codelab.shiyanlou.com/xref/linux-3.18.6/kernel/sched/core.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kernel/sched/core.c&lt;/a&gt;中，调用&lt;code&gt;__schedule&lt;/code&gt;进行调度：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;asmlinkage __visible &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; __&lt;span class=&quot;function&quot;&gt;sched &lt;span class=&quot;title&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; task_struct *tsk = current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sched_submit_work(tsk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	__schedule();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;h1 i
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>系统调用的两种使用方式</title>
    <link href="http://blog.sirany.me/2016/03/20/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.sirany.me/2016/03/20/系统调用的两种使用方式/</id>
    <published>2016-03-20T06:12:26.000Z</published>
    <updated>2016-04-15T11:48:08.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文以两段调用Linux系统调用的代码为例分析Linux系统调用的工作方式。&lt;/p&gt;
&lt;h1 id=&quot;系统调用的介绍&quot;&gt;&lt;a href=&quot;#系统调用的介绍&quot; class=&quot;headerlink&quot; title=&quot;系统调用的介绍&quot;&gt;&lt;/a&gt;系统调用的介绍&lt;/h1&gt;&lt;p&gt;系统调用的实际实现方式为由特殊指令 &lt;code&gt;int 0x80&lt;/code&gt; 发起一个软中断。CPU捕获到中断后，保存程序的上下文到栈上，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;堆栈顶地址；&lt;/li&gt;
&lt;li&gt;状态字；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cs:eip&lt;/code&gt; 的值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后根据中断的类型从中断向量表中选择对应的中断服务例程（ISR）的地址载入&lt;code&gt;cs:eip&lt;/code&gt;，CPU进入内核态开始执行ISR。在系统调用的情况下（0x80中断），ISR会根据传入的的系统调用号调用具体的实现函数来响应系统调用。当ISR完成工作后，会从栈上恢复这些上下文。&lt;/p&gt;
&lt;p&gt;在x86架构中，系统调用的参数传递使用寄存器来完成：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Syscall #&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Param 1&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Param 2&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Param 3&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Param 4&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Param 5&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Param 6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;eax&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ebx&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ecx&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;edx&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;esi&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;edi&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;ebp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Return value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;eax&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当然，实际的使用中操作系统通常将系统调用封装成C函数，程序员只需要引入适当的头文件并调用对应的函数即可完成相应的系统调用。而这些封装后的C API的实现上也使用了&lt;code&gt;int $0x80&lt;/code&gt;指令来完成具体的工作。&lt;/p&gt;
&lt;h1 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h1&gt;&lt;p&gt;以下我们分别使用这两种方式来完成对&lt;code&gt;write&lt;/code&gt;的系统调用：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *greeting = &lt;span class=&quot;string&quot;&gt;&quot;hello, world\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; write(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, greeting, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对&lt;code&gt;int $0x80&lt;/code&gt;的直接调用使用内嵌汇编来完成：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *greeting = &lt;span class=&quot;string&quot;&gt;&quot;hello, world\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;asm&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;mov $1, %%ebx\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&quot;mov $14, %%edx\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&quot;mov $4, %%eax\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&quot;int $0x80\n\t&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;string&quot;&gt;&quot;mov %%eax, %0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         : &lt;span class=&quot;string&quot;&gt;&quot;=m&quot;&lt;/span&gt;(ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         : &lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt;(greeting));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过对两段程序的编译执行，我们可以看到它们完成了一样的工作。&lt;/p&gt;
&lt;img src=&quot;/2016/03/20/系统调用的两种使用方式/sys_call.png&quot; alt=&quot;sys_call&quot; title=&quot;sys_call&quot;&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;操作系统内核实际上可以视为由一组ISR组成，CPU捕获到中断后陷入到内核态并进入相应的ISR来响应不同的系统事件。系统调用封装了对底层硬件的操作，由内核完成。其使用也是通过中断这一方式。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Definitive Guide to Linux System Calls&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>跟踪Linux内核的启动过程</title>
    <link href="http://blog.sirany.me/2016/03/13/%E8%B7%9F%E8%B8%AALinux%E5%86%85%E6%A0%B8%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://blog.sirany.me/2016/03/13/跟踪Linux内核的启动过程/</id>
    <published>2016-03-13T02:51:04.000Z</published>
    <updated>2016-04-14T00:58:00.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文结合Linux内核代码3.18.6中的init/main.c部分代码使用gdb跟踪了Linux操作系统的启动过程(部分)。&lt;/p&gt;
&lt;p&gt;使用QEMU加载内核镜像，同时指定根文件系统。启动后效果如下：&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/booting.png&quot; alt=&quot;booting&quot; title=&quot;booting&quot;&gt;
&lt;p&gt;在QEMU的启动选项中加入&lt;code&gt;-S -s&lt;/code&gt;使其在启动时冻结并开放1234端口供gdb调试：&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/start_qemu.png&quot; alt=&quot;start_qemu&quot; title=&quot;start_qemu&quot;&gt;
&lt;p&gt;进入gdb连接上内核并设置断点在start_kernel处：&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/setup_gdb.png&quot; alt=&quot;setup_gdb&quot; title=&quot;setup_gdb&quot;&gt;
&lt;p&gt;使用gdb命令c恢复内核运行，内核停止在start_kernel处：&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/start_kernel.png&quot; alt=&quot;start_kernel&quot; title=&quot;start_kernel&quot;&gt;&lt;/p&gt;
&lt;p&gt;start_kernel函数对内核的各个模块进行初始化：&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/src_init_modules1.png&quot; alt=&quot;src_init_modules1&quot; title=&quot;src_init_modules1&quot;&gt;
&lt;p&gt;包括终端、内存、cgroup、console等。&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/init_modules.png&quot; alt=&quot;init_modules&quot; title=&quot;init_modules&quot;&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/src_init_modules2.png&quot; alt=&quot;src_init_modules2&quot; title=&quot;src_init_modules2&quot;&gt;
&lt;p&gt;start_kernel最后调用的函数为rest_init：&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/rest_init.png&quot; alt=&quot;rest_init&quot; title=&quot;rest_init&quot;&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/src_rest_init.png&quot; alt=&quot;src_rest_init&quot; title=&quot;src_rest_init&quot;&gt;
&lt;p&gt;rest_init中启动了根文件系统中的1号用户态进程，启动的kthread内核线程，在最后进入cpu_idle。&lt;/p&gt;
&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/init_process.png&quot; alt=&quot;init_process&quot; title=&quot;init_process&quot;&gt;
&lt;p&gt;cpu_idle_loop为0号进程中的一个永久循环，当CPU上没有用户进程被调度时执行：&lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/src_idle.png&quot; alt=&quot;src_idle&quot; title=&quot;src_idle&quot;&gt;&lt;/p&gt;
&lt;p&gt;启动完毕，进入用户态： &lt;img src=&quot;/2016/03/13/跟踪Linux内核的启动过程/done.png&quot; alt=&quot;done&quot; title=&quot;done&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的时间片轮转多道程序内核代码分析</title>
    <link href="http://blog.sirany.me/2016/03/06/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E5%A4%9A%E9%81%93%E7%A8%8B%E5%BA%8F%E5%86%85%E6%A0%B8%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://blog.sirany.me/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/</id>
    <published>2016-03-06T02:47:43.000Z</published>
    <updated>2016-04-14T00:57:31.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文将分析&lt;a href=&quot;https://github.com/mengning/mykernel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mengning/mykernel&lt;/a&gt;中的一个简单调度器。&lt;/p&gt;
&lt;p&gt;内核的入口为mymain.c中的&lt;code&gt;void __init my_start_kernel(void)&lt;/code&gt;，&lt;/p&gt;
&lt;img src=&quot;/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/my_main.png&quot; alt=&quot;my_main&quot; title=&quot;my_main&quot;&gt;
&lt;p&gt;&lt;code&gt;my_start_kernel&lt;/code&gt;初始化了task数组中的4个进程，即四个tPCB结构体。其中pid为进程号（0-3），ip均为my_process的地址，state均为-1（未运行），sp为栈顶位置（tPCB结构中）。所有进程以环形链表的方式组织在一起以便后续轮转调度。&lt;/p&gt;
&lt;p&gt;之后的一段汇编代码将0号进程的栈顶赋给esp，并调转到其ip的位置。&lt;/p&gt;
&lt;img src=&quot;/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/my_process.png&quot; alt=&quot;my_process&quot; title=&quot;my_process&quot;&gt;
&lt;p&gt;所有进程执行的代码均为&lt;code&gt;void my_process(void)&lt;/code&gt;，其内容为每执行一段时间检查&lt;code&gt;my_need_sched&lt;/code&gt;是否被置1，若是则执行&lt;code&gt;my_schedule()&lt;/code&gt;主动让出执行。&lt;/p&gt;
&lt;img src=&quot;/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/my_timer_handler.png&quot; alt=&quot;my_timer_handler&quot; title=&quot;my_timer_handler&quot;&gt;
&lt;p&gt;&lt;code&gt;my_timer_hanlder&lt;/code&gt;响应了系统中的定时器中断，当定时器中断一定次数后将&lt;code&gt;my_need_sched&lt;/code&gt;置1，以让当前进程主动让出。&lt;/p&gt;
&lt;p&gt;调度器的代码在&lt;code&gt;void my_schedule(void)&lt;/code&gt;函数中，根据下一个进程（next）的状态（未运行或者运行中）执行不同的调度准备工作。&lt;/p&gt;
&lt;img src=&quot;/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/my_schedule_1.png&quot; alt=&quot;my_schedule_1&quot; title=&quot;my_schedule_1&quot;&gt;
&lt;p&gt;若下一进程正在运行中：保存当前的ebp到栈上，保存当前的esp到进程结构体中，从目标进程的结构体中回复esp，将下面跳转指令后面的地址作为返回地址保存到进程结构体中，跳转到目标进程。当从目标进程返回时，从栈上恢复ebp。&lt;/p&gt;
&lt;img src=&quot;/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/my_schedule_2.png&quot; alt=&quot;my_schedule_2&quot; title=&quot;my_schedule_2&quot;&gt;
&lt;p&gt;若下一进程未运行：唯一的区别是将目标进程的栈顶地址也赋给ebp（因为此时目标进程栈为空，且不会恢复ebp），其他部分和上面的情况相同。&lt;/p&gt;
&lt;p&gt;这几个函数配合则完成了一个简单的时间片轮转的多道程序内核。以下是内核执行时的进程切换：&lt;/p&gt;
&lt;img src=&quot;/2016/03/06/一个简单的时间片轮转多道程序内核代码分析/qemu.png&quot; alt=&quot;qemu&quot; title=&quot;qemu&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一个简单C程序的反汇编</title>
    <link href="http://blog.sirany.me/2016/02/28/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95C%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    <id>http://blog.sirany.me/2016/02/28/一个简单C程序的反汇编/</id>
    <published>2016-02-28T02:36:06.000Z</published>
    <updated>2016-04-14T00:57:47.000Z</updated>
    
    <content type="html">&lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现代计算机的运行方式可以被抽象为冯诺依曼体系结构，即存储程序计算机。程序与数据一起被存储在内存（外存）中，CPU按顺序读取程序指令并执行。下面以一个简单的C程序为例子介绍现代计算机的工作方式。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; g(x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f(&lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;789&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用以下指令对其进行汇编：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -S main.c -m32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到汇编代码（删减后）如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%esp, %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	8(%ebp), %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addl	$123, %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	popl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%esp, %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subl	$4, %esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	8(%ebp), %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%eax, (%esp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%esp, %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subl	$4, %esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	$456, (%esp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addl	$789, %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;整个程序由g、f、main三个函数组成，在具体运行时函数将以main -&amp;gt; f -&amp;gt; g的次序依次被调用。现代计算机使用栈来处理函数间的调用。当发生函数调用时，调用者将参数和返回地址放到栈上，然后跳转到被调用者，被调用者建立新的栈帧。&lt;/p&gt;
&lt;p&gt;首先来看main。每次进入函数时，进行栈帧准备工作：将%ebp入栈，并将%esp的值作为新的%ebp（0x2000）。然后准备被调用函数f的参数：将456入栈。调用f，将返回地址（call指令的下一条）入栈。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%esp, %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subl	$4, %esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	$456, (%esp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addl	$789, %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Addr&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x2000&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;saved %ebp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x1996&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;456&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x1992&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;address of &lt;code&gt;addl $789, %eax&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;程序跳转到f。同样的准备栈帧，栈帧准备好后参数从&lt;code&gt;8(%ebp)&lt;/code&gt;开始。f取出它的第一个参数（456）作为g的参数并入栈。调用g。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%esp, %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subl	$4, %esp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	8(%ebp), %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%eax, (%esp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	leave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Addr&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x1988&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;saved %ebp = 0x2000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x1984&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;456&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x1980&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;address of &lt;code&gt;leave&lt;/code&gt; in f&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;进入函数g。准备栈帧，取出参数（456）到%eax中，对其加123。返回上一级函数，函数返回时对栈帧进行拆除（leave），将%ebp的值赋给%esp，并将栈顶上旧的%ebp恢复到%ebp中。这里由于栈上仅有saved &lt;code&gt;%ebp&lt;/code&gt;，只需执行&lt;code&gt;popl %ebp&lt;/code&gt;。执行ret返回上一级函数f。返回值在%eax中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;g:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pushl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	%esp, %ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	movl	8(%ebp), %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	addl	$123, %eax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	popl	%ebp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Addr&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0x1976&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;saved %ebp = 0x1988&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;随后f执行leave拆除栈帧，并返回main。main也执行leave拆除栈帧，并返回。&lt;/p&gt;
&lt;p&gt;现代计算机（x86等架构）均为存储程序计算机。程序和数据一起被存储在内存中。CPU通过改变程序计数器（Program Counter）控制程序的顺序执行或跳转。同一ABI下的程序按照一定的标准使用指令、寄存器、栈等硬件资源，如x86-64下的Linux遵循System V ABI。遵循同一套ABI的二进制代码可以互相引用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;杨斯然 原创作品转载请注明出处 &lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000029000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Linux内核分析》MOOC课程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现代
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.sirany.me/tags/Linux/"/>
    
  </entry>
  
</feed>
